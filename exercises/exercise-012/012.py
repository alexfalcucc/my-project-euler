"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""


def triangle_number(n):
    """ return the triangle number to get the amount of factors number """
    const = 1
    denominator = 2
    return n * (n + const) / denominator


def numbers():
    """ Generate an infinite sequence of numbers """
    i = 1
    while True:
        yield i
        i += 1


def factors(n):
    """ Finds all factors from a number """
    return len(set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))


def main():
    """ return the triangle number that have amout numbert >= 500 """
    for number in numbers():
        t_n = triangle_number(number)
        amt_divisor = factors(t_n)
        if amt_divisor >= 500:
            return t_n

if __name__ == '__main__':
    print main()
